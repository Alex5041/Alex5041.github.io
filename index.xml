<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WaterStop on</title><link>https://alex5041.github.io/</link><description>Recent content in WaterStop on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://alex5041.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://alex5041.github.io/Assignment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/Assignment/</guid><description>Assignment Left side of the assignment before = is lvalue, right side is rvalue
Lvalue There are 4 types of possible lvalues</description></item><item><title/><link>https://alex5041.github.io/regina/dynamic-instantiation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/dynamic-instantiation/</guid><description>Dynamic instantiation Classes can have references to other classes inside them as properties. These property-classes are evaluated dynamically. Take a look at this example:</description></item><item><title/><link>https://alex5041.github.io/regina/syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/syntax/</guid><description>Syntax ReGIna&amp;rsquo;s syntax is an amalgamation of kotlin and python.
Declarations 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from typing import Iterator # This is an example class Math: @staticmethod def fib(n: int) -&amp;gt; Iterator[int]: &amp;#34;&amp;#34;&amp;#34; Fibonacci series up to n &amp;#34;&amp;#34;&amp;#34; a, b = 0, 1 while a &amp;lt; n: yield a a, b = b, a + b result = sum(Math.</description></item><item><title/><link>https://alex5041.github.io/regina/typization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/typization/</guid><description>Dynamically typed languages check variable type during runtime, meaning it is more error-prone.On the contrary, statically typed languages check variable type during compilation.</description></item><item><title/><link>https://alex5041.github.io/regina/why/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/why/</guid><description>Why I created a programming language TLDR: I didn&amp;rsquo;t think about making a library for dynamic instantiation. I should&amp;rsquo;ve made a library - that is an optimal path.</description></item><item><title>100 writing days</title><link>https://alex5041.github.io/100-days/100-writing-days/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/100-writing-days/</guid><description>Previously I did 100 reading days, but looking back, I think It was mostly about achieving consistency rather than improving pronunciation.</description></item><item><title>Basic memory management</title><link>https://alex5041.github.io/100-days/Heap-and-Stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/Heap-and-Stack/</guid><description>Last fall, I had an interview. They asked me about differences between heap and stack, how references and variables are stored.</description></item><item><title>C++ Memory model</title><link>https://alex5041.github.io/100-days/cpp_pointers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/cpp_pointers/</guid><description>Memory is a two column table. First row contains addresses, second row contains values.
1 int x = 4; When variable is assigned, an empty memory row cell is chosen.</description></item><item><title>Eye focus and main eye</title><link>https://alex5041.github.io/notes/eyes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/notes/eyes/</guid><description>On sketches that illustrate eye focus, it is shown that humans, when looking straight ahead, focus their vision at a point between their eyes.</description></item><item><title>How languages are run?</title><link>https://alex5041.github.io/100-days/transpilers-compilers-interpreters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/transpilers-compilers-interpreters/</guid><description>People in the programing languages field use fancy buzzwords like translator, transpiler, compiler, interpreter, JIT (just in time) compiler. Let&amp;rsquo;s figure out what they mean.</description></item><item><title>ReGIna</title><link>https://alex5041.github.io/regina/regina/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/regina/</guid><description>is a dynamically typed language with syntax similar to Kotlin and Python.
Core idea Difference between other languages and ReGIna is dynamic instantiation.</description></item></channel></rss>